@charset "UTF-8";
/**
 * The scale.
 */
.h-center-pos {
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center; }

.h-color-blue {
  color: #4a90e2; }

.is-hidden {
  display: none; }

/* ============================================================================
   SETTINGS
   ========================================================================= */
/**
 * All of Shell's settings (Sass variables).
 *
 * The settings are broken into two categories:
 *
 * - "Global".....settings for the entire library.
 * - "Local"......settings for a particular partial.
 *
 * ----------------------------------------------------------------------------
 *
 * All settings start with a global namespace: `$shell` followed by one
 * hyphen, like this:
 *
   $shell-
 *
 * "Global" settings include a letter "g" to easily identify them, like so:
 *
   $shell-g-
 *
 * "Local" settings include the name of its section to easily identify them, so
 * settings for the "Base" and "Grid" sections would be formatted like this:
 *
   $shell-base-
   $shell-grid-
 *
 * The `$shell` namespace prevents your project settings and Shell's settings
 * from clashing with each other, and allows you to easily see what is
 * coming from Shell and what isn't.
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1.  Base number (Global)
 * 2.  Colours (Global)
 * 3.  Typography (Global)
 * 4.  Spacing (Global)
 * 5.  Cosmetics (Global)
 * 6.  Breakpoints (Global)
 * 7.  Z-Index system (Global)
 * 8.  HiDPI units (Global)
 * 9.  HTML textual `<input>`s (Global)
 * 10. Normalise and Reset (Local)
 * 11. Base (Local)
 * 12. Container (Local)
 * 13. Grid (Local)
 * 14. Helpers (Local)
 */
/* 1. Base number (Global)
   ========================================================================= */
/**
 * The baseline number from which everything else is derived.
 */
/* 2. Colours (Global)
   ========================================================================= */
/**
 * Black and white.
 */
/**
 * Base text.
 */
/**
 * Links.
 */
/* 3. Typography (Global)
   ========================================================================= */
/**
 * The scale based on `$shell-g-base-number` being 16:
 *
 * Decrease: 14, 13, 12
 * Increase: 18, 24, 28, 32, 40, 48, 56, 72
 */
/**
 * Line height.
 */
/**
 * Families.
 */
/**
 * Weights.
 */
/* 4. Spacing (Global)
   ========================================================================= */
/**
 * The scale based on `$shell-g-base-number` being 16:
 *
 * Decrease: 12, 8, 4
 * Increase: 24, 32, 40, 48, 56, 72, 96
 */
/* 5. Cosmetics (Global)
   ========================================================================= */
/* 6. Breakpoints (Global)
   ========================================================================= */
/**
 * The breakdown of the breakpoints is based off this chart:
 * http://static.lukew.com/unified_device_design.png
 *
 * Here's the thinking:
 *
 * - Palm..........smart-phones and feature phones—anything that can fit into
 *                 the palm of a hand.
 * - Lap...........typically tablets, notebooks and laptops—anything that is
 *                 portable that doesn't include phones.
 * - Lap small.....smaller tablets/notebooks and e-readers e.g. Kindle.
 * - Lap large.....larger tablets and laptops.
 * - Desk..........desktop computers, TVs, etc.—anything that isn't portable.
 * - Desk large....larger desktop computer monitors, TVs, and who knows what
 *                 else?
 *
 * The breakpoints:
 *
 * - Palm: 0–640px
 * - Lap: 641px +
 * - Lap small: 768px +
 * - Lap large: 901px +
 * - Desk: 1200px +
 * - Desk large: 1366px +
 *
 * @credit
 * http://www.lukew.com/ff/entry.asp?1679
 */
/**
 * All the breakpoints divided by the default user-agent font-size setting
 * that is non-overridable by Shell's base font size setting:
 * `$shell-g-font-size`. We do this division as all viewport width and height
 * media queries are to be applied with the `em` unit. See:
 * http://blog.cloudfour.com/the-ems-have-it-proportional-media-queries-ftw/.
 *
 * N.B. if you wish to override any of the breakpoints then don't forget to
 * apply this calculation:
 *
    ([breakpoint-value] / 16) * 1em
 *
 * N.B. as we're using a Sass map we need to use a Sass function to make it
 * easier to apply the map keys, the function lives in
 * "Mixins/Functions -> Retrieve from maps".
 */
/**
 * The setting used for the default breakpoint applied to the
 * "Mixins/Functions -> Apply at breakpoints" mixin.
 */
/* 7. Z-Index system (Global)
   ========================================================================= */
/**
 * A nice system that uses Sass maps to keep your project `z-index`s
 * maintainable, sane, and free of those crazy `z-index: 99999;` occurrences!
 *
 * Be sure to read this to fully understand how the system works:
 * http://www.sitepoint.com/better-solution-managing-z-index-sass/
 *
 * Shell kicks it off by providing a standard stacking order that most projects
 * would require, you can then update the Sass map in your project "Settings"
 * partial, be sure to use nested maps to make this system aware of stacking
 * contexts as having a flat map will soon become a headache to maintain.
 *
 * Applying `z-index`s with this system is done like this:
 *
    .c-header {
        z-index: z(header);
    }
 *
 * And for nested stacking contexts (defined via a nested map):
 *
    .c-dialog__close-button {
        z-index: z(dialog-elements, close-button);
    }
 *
 * N.B. as we're using a Sass map (and nested maps) we need to use a Sass
 * function to make it easier to apply the map keys and to be able to
 * retrieve nested map keys. The function lives in
 * "Mixins/Functions -> Retrieve from maps".
 *
 * @credit
 * http://www.sitepoint.com/better-solution-managing-z-index-sass/
 */
/**
 * Starting from highest to lowest:
 *
    <body>
        <dialog>
            <dialog-close-button>
        <dialog-underlay>
        <header>
        <main>
        <footer>
    </body>
 */
/* 8. HiDPI (Global)
   ========================================================================= */
/**
 * The two HiDPI units required for full support, see:
 * http://caniuse.com/#feat=css-media-resolution. Eventually the `dppx` unit
 * will only be required.
 *
 * N.B. Autoprefixer will take care of generating the non-standard
 * `-webkit-min-device-pixel-ratio` for browsers/devices that need it.
 */
/**
 * Easily target HiDPI resolutions with this media query.
 */
/* stylelint-disable-next-line string-no-newline */
/* 9. HTML textual `<input>`s (Global)
   ========================================================================= */
/* stylelint-disable string-no-newline */
/* stylelint-enable */
/* 10. Normalise and Reset (Local)
   ========================================================================= */
/**
 * Booleans.
 */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/**
 * `:focus` outline styles.
 */
/* 11. Base (Local)
   ========================================================================= */
/**
 * Booleans.
 */
/**
 * Root element.
 */
/**
 * Links.
 */
/* 12. Container (Local)
   ========================================================================= */
/**
 * Booleans.
 */
/**
 * Widths.
 */
/**
 * Gutter size.
 */
/* 13. Grid (Local)
   ========================================================================= */
/**
 * Grid column widths.
 */
/**
 * For all grid item widths turn on the ability to apply breakpoints via
 * boolean settings then define the breakpoints, see: "Mixins/Functions ->
 * Apply at breakpoints" to understand how this works.
 */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* 14. Helpers (Local)
   ========================================================================= */
/**
 * For certain "Helpers" turn on the ability to apply breakpoints via boolean
 * settings then define the breakpoints, see: "Mixins/Functions ->
 * Apply at breakpoints" to understand how this works.
 */
/**
 * Text sizes.
 */
/**
 * Base.
 */
/* stylelint-disable-next-line max-line-length */
/**
 * Decrease from base.
 */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/**
 * Increase from base.
 */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/**
 * Alignments.
 */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/**
 * Text truncate.
 */
/* stylelint-disable-next-line max-line-length */
/**
 * Word wrap and hyphenate.
 */
/* stylelint-disable-next-line max-line-length */
/**
 * Hide.
 */
/* stylelint-disable-next-line max-line-length */
/**
 * Spacing.
 */
/**
 * Decrease from base.
 */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/**
 * Increase from base.
 */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* stylelint-disable-next-line max-line-length */
/* ============================================================================
   MIXINS AND FUNCTIONS
   ========================================================================= */
/**
 * All of Shell's mixins and functions.
 *
 * N.B. all mixins and functions to be written in SassDoc documentation system,
 * see: http://sassdoc.com/.
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Private mixins and functions
 * 2. HiDPI background image (Mixin)
 * 3. Convert pixels to `rem`s or `em`s (Function)
 * 4. Apply at breakpoints (Mixin)
 * 5. Retrieve from maps (Function)
 * 6. Helpers (Mixin)
 * 7. Shared styles (Mixin)
 */
/* 1. Private mixins and functions
   ========================================================================= */
/**
 * Shell-only mixins and functions, not for Shell consumers although some can
 * be used if the need arises.
 */
/* 2. HiDPI background image (Mixin)
   ========================================================================= */
/* 3. Convert pixels to `rem`s or `em`s (Function)
   ========================================================================= */
/* 4. Apply at breakpoints
   ========================================================================= */
/**
 * This mixin makes it really easy for a Shell consumer to apply certain parts
 * of Shell at any width based breakpoint(s).
 *
 * N.B. the mixin does not support height based breakpoints or breakpoint
 * ranges.
 *
 * The mixin can also be used outside of Shell in project styles but its main
 * purpose is to allow Shell consumers to easily apply certain parts of Shell
 * at any breakpoint(s), mainly the "Grid".
 *
 * The mixin will accept any of the named breakpoints set in "Settings ->
 * Breakpoints" (which can be renamed and breakpoints redefined in your
 * project) or any number (the pixel amount of the viewport). The breakpoints
 * get converted to the `em` unit which is best practice in Responsive Web
 * Design. You can also specify if you want a minimum or maximum width media
 * query by passing in the "min" or "max" labels after you define your
 * breakpoint, the default is minimum width media queries to favour the
 * "Mobile-first" approach.
 *
 * Using this mixin requires you to "opt in" as Shell doesn't want to assume
 * all of its consumers are building responsive UI's requiring the CSS this
 * mixin generates. Opting in requires changing the relevant Boolean settings
 * found in: "Settings". For example if you wanted the "Hide Visually" Helper
 * to use this mixin you change its Boolean setting:
 * `$shell-helper-hide-visually-apply-at-breakpoints` to `true` then define
 * the breakpoints you need via its other setting:
 * `$shell-helper-hide-visually-define-breakpoints`. So in the "Shell
 * Overrides" section of your project "Settings" you will have something like
 * this, depending on what breakpoints you choose:
 *
   $shell-helper-hide-visually-apply-at-breakpoints: true;
   $shell-helper-hide-visually-define-breakpoints: (400 max, lap, desk);
 *
 * You define your breakpoints in a comma separated list enclosed in curly
 * brackets with the "min" or "max" labels always coming *after* the
 * breakpoint. If you want ALL of the named breakpoints defined here:
 * "Settings -> Breakpoints" then you can simply pass in the word "all", like
 * so:
 *
   $shell-helper-hide-visually-define-breakpoints: (all);
 *
 * Right now the mixin only allows "all" by itself i.e. you cannot add numbers
 * (non-named breakpoints), so doing this will not work:
 *
   $shell-helper-hide-visually-define-breakpoints: (all, 900);
 *
 * Shell has a global breakpoint setting set in "Settings -> Breakpoints" so
 * that you can easily share breakpoints across everything that uses the
 * mixin. By default Shell doesn't apply any breakpoints to this setting, this
 * is for the Shell consumer to apply if they need the ability for shared
 * global breakpoints. So in the "Shell Overrides" section of your project
 * "Settings" you could do this:
 *
   $shell-g-global-breakpoints: (lap, desk);
 */
/* 5. Retrieve from maps
   ========================================================================= */
/**
 * An easier way to apply keys from the Shell maps defined in "Settings"
 * instead of using the native `map-get` function which can get tedious to
 * type again and again.
 *
 * For example, if you wanted to apply a key from the "Z-Index system" map
 * using the native `map-get` function you would have to do it like this:
 *
    z-index: map-get($shell-g-z-layers, header);
 *
 * And when applying nested map keys, this:
 *
    z-index: map-get(map-get($shell-g-z-layers, modal-elements), close-button);
 *
 * Instead we can apply it in a much nicer way:
 *
    z-index: z(header);
 *
 * And for a nested map key:
 *
    z-index: z(modal-elements, close-button);
 */
/* 6. Helpers
   ========================================================================= */
/**
 * Here are all the Helper mixins, see the Helpers intro comment block for
 * more information.
 */
/* 7. Shared styles
   ========================================================================= */
/**
 * Certain styles need to be shared to keep things DRY.
 */
/* ============================================================================
   NORMALISE AND RESET
   ========================================================================= */
/**
 * Let's get all browsers rendering all elements more consistently and in line
 * with modern standards, and let's nuke certain user-agent styles so that
 * everything is on an even playing field.
 *
 * We can also be a bit opinionated about CM specific style treatments, marked
 * with "N.B. Shell specific".
 *
 * N.B. we should be keeping an eye on the normalize.css repo especially the
 * Issues: https://github.com/necolas/normalize.css/issues/.
 *
 * @credit
 * https://necolas.github.io/normalize.css/
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Root element and global resets
 * 2. Block-level elements
 * 3. Inline elements
 * 4. Embedded elements
 * 5. Form elements
 * 6. Interactions
 */
/* 1. Root element and global resets
   ========================================================================= */
/**
 * 1. Reset the `box-sizing` property to the more friendly `border-box` value,
 *    N.B. Shell specific.
 * 2. Prevent adjustments of font size after orientation changes in IE on
 *    Windows Phone and in iOS.
 */
html {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* stylelint-disable property-no-vendor-prefix */
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  /* stylelint-enable */ }

/* stylelint-disable selector-no-universal */
*,
*::before,
*::after {
  -webkit-box-sizing: inherit;
          box-sizing: inherit; }

/* stylelint-enable */
/**
 * Remove all margins, paddings, and borders.
 *
 * N.B. do not include the following elements:
 * - `<input>`
 * - `<button>`
 * - `<textarea>`
 *
 * The complete list of HTML5 elements:
 * https://developer.mozilla.org/en/docs/Web/Guide/HTML/HTML5/
 * HTML5_element_list
 *
 * N.B. Shell specific.
 */
a,
abbr,
address,
article,
aside,
b,
blockquote,
body,
caption,
cite,
code,
dd,
del,
details,
dfn,
dialog,
div,
dl,
dt,
em,
fieldset,
figcaption,
figure,
footer,
form,
h1,
h2,
h3,
h4,
h5,
h6,
header,
html,
i,
iframe,
img,
ins,
kbd,
label,
legend,
li,
main,
menu,
nav,
object,
ol,
p,
pre,
q,
s,
samp,
section,
small,
span,
strong,
sub,
summary,
sup,
table,
tbody,
td,
tfoot,
th,
thead,
time,
tr,
u,
ul,
var {
  border: 0;
  margin: 0;
  padding: 0; }

/* 2. Block-level elements
   ========================================================================= */
/**
 * Add the correct display in IE 9-.
 *
 * 1. Add the correct display in Edge, IE, and Firefox.
 * 2. Add the correct display in IE.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
nav,
main,
menu,
section {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/**
 * 1. Add the correct display in IE.
 * 2. Add the correct display in IE 10-.
 */
template,
[hidden] {
  display: none; }

/**
 * Reset lists, this is in addition to removing `margin` and `padding` in
 * "Root element and global resets".
 *
 * N.B. Shell specific.
 */
ul,
ol {
  list-style-type: none; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  height: 0;
  overflow: visible; }

/* 3. Inline elements
   ========================================================================= */
/**
 * Add the correct display in IE 9-.
 */
audio,
canvas,
progress,
video {
  display: inline-block; }

/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* stylelint-disable-next-line property-no-vendor-prefix */
  -webkit-text-decoration-skip: objects; }

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers.
 */
a:active,
a:hover {
  outline-width: 0; }

/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  text-decoration: underline;
  /* stylelint-disable-next-line declaration-block-no-duplicate-properties */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted; }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
/* stylelint-disable-next-line no-duplicate-selectors */
b,
strong {
  font-weight: bolder; }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  /* stylelint-disable-next-line declaration-property-unit-whitelist */
  font-size: 100%; }

/**
 * Prevent `<sub>` and `<sup>` affecting line height in all browsers.
 */
sub,
sup {
  /* stylelint-disable-next-line declaration-property-unit-whitelist */
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* 4. Embedded elements
   ========================================================================= */
/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* 5. Form elements
   ========================================================================= */
/**
 * 1. Change font properties to `inherit` in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font: inherit;
  margin: 0; }

/**
 * Show the overflow in IE.
 *
 * 1. Show the overflow in Edge.
 */
button,
input {
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 *
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * Reset all styles so we have a blank canvas.
 *
 * N.B. Shell specific.
 */
button {
  background: transparent;
  border: 0;
  padding: 0; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `<audio>` and `<video>`
 *    controls in Android 4.
 * 2. Improve usability and consistency of cursor style between image-type
 *    `<input>` and others (N.B. Shell specific).
 * 3. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type='button'],
[type='reset'],
[type='submit'] {
  /* stylelint-disable-next-line property-no-vendor-prefix */
  -webkit-appearance: button;
  cursor: pointer; }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type='button']::-moz-focus-inner,
[type='reset']::-moz-focus-inner,
[type='submit']::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type='button']:-moz-focusring,
[type='reset']:-moz-focusring,
[type='submit']:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Indicate that `<label>` will shift focus to the associated `<input>`
 * element.
 *
 * N.B. Shell specific.
 */
label {
  cursor: pointer; }

/**
 * 1. Remove the default vertical scrollbar in IE.
 * 2. Disable `<textarea>`s from being resized horizontally
 *    (N.B. Shell specific).
 */
textarea {
  overflow: auto;
  resize: vertical; }

/**
 * Chrome and Firefox set a `min-width: min-content;` on `<fieldset>`s, so we
 * reset that to ensure it behaves more like a standard block element, see:
 * http://stackoverflow.com/questions/17408815/
 * fieldset-resizes-wrong-appears-to-have-unremovable-min-width-min-content.
 *
 * N.B. Shell specific.
 */
fieldset {
  min-width: 0; }

@-moz-document url-prefix() {
  fieldset {
    display: table-cell; } }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the colour inheritance from `<fieldset>` elements in IE.
 */
legend {
  color: inherit;
  display: table;
  max-width: 100%;
  white-space: normal; }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Apply the `not-allowed` cursor for disabled elements (`<button>`, `<input>`,
 * `<textarea>`, `<optgroup>`, `<option>` and `<fieldset>`) and disable pointer
 * events.
 *
 * N.B. Shell specific.
 */
:disabled {
  cursor: not-allowed;
  pointer-events: none; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type='checkbox'],
[type='radio'] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  padding: 0; }

/**
 * Remove the increment and decrement buttons in Webkit and Firefox.
 *
 * N.B. Shell specific.
 */
[type='number'] {
  /* stylelint-disable-next-line property-no-vendor-prefix */
  -moz-appearance: textfield; }

[type='number']::-webkit-inner-spin-button,
[type='number']::-webkit-outer-spin-button {
  /* stylelint-disable-next-line property-no-vendor-prefix */
  -webkit-appearance: none;
  margin: 0; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type='search'] {
  /* stylelint-disable-next-line property-no-vendor-prefix */
  -webkit-appearance: textfield;
  outline-offset: -2px; }

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */
[type='search']::-webkit-search-cancel-button,
[type='search']::-webkit-search-decoration {
  /* stylelint-disable-next-line property-no-vendor-prefix */
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
/* stylelint-disable-next-line no-descending-specificity */
::-webkit-file-upload-button {
  /* stylelint-disable-next-line property-no-vendor-prefix */
  -webkit-appearance: button;
  font: inherit; }

/**
 * Remove the clear field button (an "X" icon) and the reveal password button
 * (an "eye" icon) that is generated by IE 10+ for textual inputs. See:
 * http://stackoverflow.com/a/21869433/1116204.
 *
 * N.B. Shell specific.
 */
/* stylelint-disable no-descending-specificity */
::-ms-clear,
::-ms-reveal {
  display: none; }

/* stylelint-enable */
/**
 * Unstyle the caret on `<select>`s in IE 10+.
 *
 * N.B. Shell specific.
 */
/* stylelint-disable-next-line no-descending-specificity */
::-ms-expand {
  background-color: transparent;
  border: 0; }

/**
 * Rules for iOS devices.
 *
 * We isolate these rules behind an `.target-ios` class that is appended to the
 * `<html>` element via user-agent sniffing, for example:
 *
    <html class="target-ios">
 *
 * N.B. this functionality is not part of the Shell library, you will need to
 * add it yourself to the project Shell applies too.
 *
 * N.B. Shell specific.
 */
.target-ios {
  /**
     * Fixes "clickability" issue (and more generally, the firing of events
     * such as focus as well) for traditionally non-focusable elements with
     * `[role="button"]`, see:
     * https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile
     */
  /**
     * Remove the top inner shadow from iOS inputs. See:
     * https://davidwalsh.name/input-shadows-ipad
     */
  /**
     * Remove rounded corners that iOS applies to all `<input>` buttons.
     */ }
  .target-ios [role='button'] {
    cursor: pointer; }
  .target-ios input[type='text'],
  .target-ios input[type='search'],
  .target-ios input[type='tel'],
  .target-ios input[type='url'],
  .target-ios input[type='email'],
  .target-ios input[type='password'],
  .target-ios input[type='month'],
  .target-ios input[type='week'],
  .target-ios input[type='time'],
  .target-ios input[type='date'],
  .target-ios input[type='datetime'],
  .target-ios input[type='datetime-local'],
  .target-ios input[type='number'],
  .target-ios textarea {
    background-clip: padding-box; }
  .target-ios [type='submit'],
  .target-ios [type='button'],
  .target-ios [type='image'],
  .target-ios [type='reset'] {
    border-radius: 0; }

/* 6. Interactions
   ========================================================================= */
/**
 * Suppress the focus outline on links that cannot be accessed via a keyboard.
 * This prevents an unwanted focus outline from appearing around elements that
 * might still respond to pointer events.
 *
 * N.B. it is okay to use `!important` here as we're doing it pre-emptively
 * i.e. you know you will always want the rule it's applied too to take
 * precedence.
 *
 * N.B. Shell specific.
 */
[tabindex='-1']:focus {
  outline: none !important; }

/**
 * Optional custom `:focus` styles for all browsers, however, if you wish to
 * keep the default focus ring that Webkit and Blink browsers apply then assign
 * `$shell-normalise-reset-apply-webkit-and-blink-focusring-if-focus-outline-
 * style-is-applied-for-all-browsers` to `true`.
 */
/**
 * Don't use outline on Mozilla browsers, if it's not needed.
 */
:focus:not(:-moz-focusring) {
  outline: none; }

/**
 * Avoid 300ms click delay on touch devices that support the `touch-action` CSS
 * property.
 *
 * In particular, unlike most other browsers, IE 11+Edge on Windows 10 on touch
 * devices and IE Mobile 10-11 DON'T remove the click delay when
 * `<meta name="viewport" content="width=device-width">` is present.
 * However, they DO support removing the click delay via
 * `touch-action: manipulation`.
 *
 * See:
 * - http://caniuse.com/#feat=css-touch-action
 * - http://patrickhlauke.github.io/touch/tests/results/#suppressing-300ms-delay
 * - https://adactio.com/journal/10019
 * - https://developers.google.com/web/updates/2013/12/300ms-tap-delay-gone-away
 */
/* stylelint-disable no-descending-specificity */
a,
area,
button,
input,
label,
select,
summary,
textarea,
[tabindex]:not([tabindex='-1']) {
  -ms-touch-action: manipulation;
      touch-action: manipulation; }

/* stylelint-enable */
/**
 * Remove `:focus` styles for `coarse` input mechanisms, and on the `:hover`
 * pseudo class.
 */
@media (pointer: coarse) and (hover: none) {
  :focus {
    outline: none; } }

/* ============================================================================
   GRID
   ========================================================================= */
/**
 * A powerful Flexbox-based grid that is responsive ready, nestable, and comes
 * with a bunch of handy modifiers. This makes the grid the workhorse of your
 * UI builds, any layout you need always look to the grid first—including
 * within your "Components", it exists so you don't have to write redundant
 * CSS to construct layouts.
 *
 * Every grid column width can be generated at any breakpoint thanks to the
 * mixin found here: "Mixins and Functions -> Apply at breakpoints". So if you
 * wanted 2 columns at smaller viewports then go to 4 columns at larger
 * viewports you can easily do this just by passing in the breakpoints you need
 * into the relevant settings, like so:
 *
   // 2 cols
   $shell-grid-apply-2-col-width-at-breakpoints: true;
   $shell-grid-define-2-col-width-breakpoints: (1199 max);

   // 4 cols
   $shell-grid-apply-4-col-width-at-breakpoints: true;
   $shell-grid-define-4-col-width-breakpoints: (desk);
 *
 * This will to compile to:
 *
    @media (max-width: 74.9375em) {
        .l-grid__item--2-col-up-to-desk {
            width: 16.6666%;
        }
    }

    @media (min-width: 75em) {
        .l-grid__item--4-col-from-desk {
            width: 33.3333%%;
        }
    }
 *
 * Other styles cannot be applied to a grid item. Grid is a "Layout Module"
 * therefore the Single Responsibility Principle and the Open/Close Principle
 * strictly applies. So this would be invalid:
 *
    <div class="l-grid__item  c-card">
        […]
    </div>
 *
 * Here we have wrongly applied a "Component" (`c-card`) to the same element as
 * a "Layout Module", we've mixed concerns, this can result in this part of
 * the UI being prone to breakages. The valid way to approach this would be:
 *
    <div class="l-grid__item">
        <div class="c-card">
            […]
        </div>
    </div>
 *
 * As nicely put by Harry Roberts:
 *
 * "Grid systems grid should be thought of as shelves. They contain content but
 * are not content in themselves. You put up your shelves then fill them with
 * your stuff. By setting up our grids separately to our components you can
 * move components around a lot more easily than if they had dimensions
 * applied to them; this makes our front-ends a lot more adaptable and quick
 * to work with."
 *
 * N.B. they're are a number of Flexbox bugs captured here:
 * https://github.com/philipwalton/flexbugs, these have been accounted for in
 * the Shell grid however if anything is missed please log an issue:
 * https://github.com/campaignmonitor/shell/issues.
 *
 * ----------------------------------------------------------------------------
 *
 * Grid is namespaced with "l" followed by one hyphen, like this:
 *
   l-grid
 *
 * The "l" stands for "layout" as Grid is a "Layout Module".
 *
 * ----------------------------------------------------------------------------
 *
 * @markup
    <div class="l-grid [modifier(s)]">
        <div class="l-grid__item l-grid__item--2-col">
            […]
        </div>
        <div class="l-grid__item l-grid__item--2-col">
            […]
        </div>
    </div>

    <div class="l-grid [modifier(s)]">
        <div class="l-grid__item l-grid__item--4-col">
            […]
        </div>
        <div class="l-grid__item l-grid__item--4-col">
            […]
        </div>
        <div class="l-grid__item l-grid__item--4-col">
            […]
        </div>
        <div class="l-grid__item l-grid__item--4-col">
            […]
        </div>
    </div>
 *
 * @credit
 * https://github.com/suitcss/components-grid
 */
/**
 * Grid container.
 *
 * 1. Negative left margin to negate the horizontal gutters.
 */
.l-grid {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-flow: row wrap;
          flex-flow: row wrap;
  margin-left: -1rem; }

/**
 * Grid items.
 *
 * 1. Allows the use of widths.
 * 2. Horizontal gutter.
 */
.l-grid__item {
  -ms-flex-preferred-size: auto;
      flex-basis: auto;
  padding-left: 1rem; }

/**
 * Modifier: all items match height of tallest item in a row.
 */
.l-grid--equal-height > .l-grid__item {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex; }

/**
 * Modifier: fit, all grid items have an equal width.
 *
 * 1. Provide all values to avoid IE 10 bug with the shorthand `flex`
 *    property, see: http://git.io/vllC7.
 *    Use `0%` to avoid bug in IE 10/11 with unitless `flex-basis`, see:
 *    http://git.io/vllWx.
 */
.l-grid--fit .l-grid__item {
  -webkit-box-flex: 1;
      -ms-flex: 1 1 0%;
          flex: 1 1 0%; }

/**
 * Modifiers: horizontal gutter sizes.
 */
.l-grid--gutter-horizontal {
  margin-left: -1rem; }
  .l-grid--gutter-horizontal > .l-grid__item {
    padding-left: 1rem; }

.l-grid--gutter-horizontal-small {
  margin-left: -0.75rem; }
  .l-grid--gutter-horizontal-small > .l-grid__item {
    padding-left: 0.75rem; }

.l-grid--gutter-horizontal-x-small {
  margin-left: -0.5rem; }
  .l-grid--gutter-horizontal-x-small > .l-grid__item {
    padding-left: 0.5rem; }

.l-grid--gutter-horizontal-2x-small {
  margin-left: -0.25rem; }
  .l-grid--gutter-horizontal-2x-small > .l-grid__item {
    padding-left: 0.25rem; }

.l-grid--gutter-horizontal-large {
  margin-left: -1.5rem; }
  .l-grid--gutter-horizontal-large > .l-grid__item {
    padding-left: 1.5rem; }

.l-grid--gutter-horizontal-x-large {
  margin-left: -2rem; }
  .l-grid--gutter-horizontal-x-large > .l-grid__item {
    padding-left: 2rem; }

.l-grid--gutter-horizontal-2x-large {
  margin-left: -2.5rem; }
  .l-grid--gutter-horizontal-2x-large > .l-grid__item {
    padding-left: 2.5rem; }

.l-grid--gutter-horizontal-3x-large {
  margin-left: -3rem; }
  .l-grid--gutter-horizontal-3x-large > .l-grid__item {
    padding-left: 3rem; }

.l-grid--gutter-horizontal-4x-large {
  margin-left: -3.5rem; }
  .l-grid--gutter-horizontal-4x-large > .l-grid__item {
    padding-left: 3.5rem; }

.l-grid--gutter-horizontal-5x-large {
  margin-left: -4.5rem; }
  .l-grid--gutter-horizontal-5x-large > .l-grid__item {
    padding-left: 4.5rem; }

.l-grid--gutter-horizontal-6x-large {
  margin-left: -6rem; }
  .l-grid--gutter-horizontal-6x-large > .l-grid__item {
    padding-left: 6rem; }

/**
 * Modifiers: vertical gutters.
 */
.l-grid--gutter-vertical {
  margin-bottom: -1rem; }
  .l-grid--gutter-vertical > .l-grid__item {
    margin-bottom: 1rem; }

.l-grid--gutter-vertical-small {
  margin-bottom: -0.75rem; }
  .l-grid--gutter-vertical-small > .l-grid__item {
    margin-bottom: 0.75rem; }

.l-grid--gutter-vertical-x-small {
  margin-bottom: -0.5rem; }
  .l-grid--gutter-vertical-x-small > .l-grid__item {
    margin-bottom: 0.5rem; }

.l-grid--gutter-vertical-2x-small {
  margin-bottom: -0.25rem; }
  .l-grid--gutter-vertical-2x-small > .l-grid__item {
    margin-bottom: 0.25rem; }

.l-grid--gutter-vertical-large {
  margin-bottom: -1.5rem; }
  .l-grid--gutter-vertical-large > .l-grid__item {
    margin-bottom: 1.5rem; }

.l-grid--gutter-vertical-x-large {
  margin-bottom: -2rem; }
  .l-grid--gutter-vertical-x-large > .l-grid__item {
    margin-bottom: 2rem; }

.l-grid--gutter-vertical-2x-large {
  margin-bottom: -2.5rem; }
  .l-grid--gutter-vertical-2x-large > .l-grid__item {
    margin-bottom: 2.5rem; }

.l-grid--gutter-vertical-3x-large {
  margin-bottom: -3rem; }
  .l-grid--gutter-vertical-3x-large > .l-grid__item {
    margin-bottom: 3rem; }

.l-grid--gutter-vertical-4x-large {
  margin-bottom: -3.5rem; }
  .l-grid--gutter-vertical-4x-large > .l-grid__item {
    margin-bottom: 3.5rem; }

.l-grid--gutter-vertical-5x-large {
  margin-bottom: -4.5rem; }
  .l-grid--gutter-vertical-5x-large > .l-grid__item {
    margin-bottom: 4.5rem; }

.l-grid--gutter-vertical-6x-large {
  margin-bottom: -6rem; }
  .l-grid--gutter-vertical-6x-large > .l-grid__item {
    margin-bottom: 6rem; }

/**
 * Modifier: gutterless for both horizontal gutters, we don't need to apply for
 * vertical gutters as their gutters aren't applied at the base level.
 *
 * N.B. we boost the specificity by chaining the base class to the modifier
 * class to make sure we're always overriding any gutter modifier classes.
 */
.l-grid.l-grid--gutterless {
  margin-left: 0; }
  .l-grid.l-grid--gutterless > .l-grid__item {
    padding-left: 0; }

/**
 * Modifiers: alignments for all grid items in a grid container and alignments
 * for the direct child of a grid item.
 *
 * Grid container alignments work like this:
 *
 * ➜ Middle
 * [.........................................................................]
 * [....................[Flex item][Flex item][Flex item]....................]
 * [.........................................................................]
 *
 * ➜ Bottom
 * [.........................................................................]
 * [.........................................................................]
 * [....................[Flex item][Flex item][Flex item]....................]
 *
 * ➜ Center
 * [....................[Flex item][Flex item][Flex item]....................]
 *
 * ➜ Right
 * [........................................[Flex item][Flex item][Flex item]]
 *
 * Grid item alignments work as above but within a grid item and are best
 * suited when grid items use set column widths (see: "Modifiers: grid column
 * widths").
 */
.l-grid--align-middle,
.l-grid__item--align-middle {
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center; }

.l-grid--align-bottom,
.l-grid__item--align-bottom {
  -webkit-box-align: end;
      -ms-flex-align: end;
          align-items: flex-end; }

.l-grid--align-center,
.l-grid__item--align-center {
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center; }

.l-grid--align-right,
.l-grid__item--align-right {
  -webkit-box-pack: end;
      -ms-flex-pack: end;
          justify-content: flex-end; }

.l-grid__item--align-middle,
.l-grid__item--align-bottom,
.l-grid__item--align-center,
.l-grid__item--align-right {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex; }

/**
 * Modifier: alignments for grid items themselves using the "Auto-margin"
 * technique. The most common use case is when you want one of the grid items
 * in a grid container to be aligned in the center or to the right of the
 * remaining space in a grid container.
 *
 * See: https://medium.freecodecamp.com/understanding-flexbox-everything-
 * you-need-to-know-b4013d4dc9af#.11oq5pimb#d874
 *
 * ➜ Center
 * [[Flex item @20%][Flex item @20%][Flex item @20%]........[Flex item].......]
 *
 * ➜ Right
 * [[Flex item @20%][Flex item @20%][Flex item @20%]...............[Flex item]]
 */
.l-grid__item--auto-margin-center {
  margin-left: auto;
  margin-right: auto; }

.l-grid__item--auto-margin-right {
  margin-left: auto; }

/**
 * Modifiers: "space between" and "space around".
 */
.l-grid--space-between {
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between; }

.l-grid--space-around {
  -ms-flex-pack: distribute;
      justify-content: space-around; }

/**
 * Modifier: no wrap.
 */
.l-grid--nowrap {
  -ms-flex-wrap: nowrap;
      flex-wrap: nowrap; }

/**
 * Modifier: make a grid item take up the remaining space of a grid container.
 */
.l-grid__item--fill {
  -webkit-box-flex: 1;
      -ms-flex-positive: 1;
          flex-grow: 1; }

/**
 * Modifiers: grid column widths.
 */
.l-grid__item--1-col {
  width: calc(100% / 12); }

.l-grid__item--2-col {
  width: calc((100% / 12) * 2); }

.l-grid__item--3-col {
  width: 25%; }

.l-grid__item--4-col {
  width: calc((100% / 12) * 4); }

.l-grid__item--5-col {
  width: calc((100% / 12) * 5); }

.l-grid__item--6-col {
  width: 50%; }

.l-grid__item--7-col {
  width: calc((100% / 12) * 7); }

.l-grid__item--8-col {
  width: calc((100% / 12) * 8); }

.l-grid__item--9-col {
  width: 75%; }

.l-grid__item--10-col {
  width: calc((100% / 12) * 10); }

.l-grid__item--11-col {
  width: calc((100% / 12) * 11); }

.l-grid__item--12-col {
  width: 100%; }

/* ============================================================================
   HELPERS
   ========================================================================= */
/**
 * The purpose of Helpers is to provide extremely common style treatments
 * and UI patterns, some good examples are:
 *
 * - Hide an element visually but have it available for screen readers.
 * - Truncate a line of text using an ellipsis.
 * - Applying white space outside of Components.
 *
 * Rather than repeating the CSS for these common style treatments and UI
 * patterns over and over and also the cognitive load of having to remember
 * their CSS declarations we instead abstract them into nicely reusable
 * classes and mixins.
 *
 * Helpers all follow the Single Responsibility Principle and the Open/Closed
 * Principle meaning they do one thing and one thing only and are never open to
 * extension i.e. you cannot modify or add to them in any way. If you need to
 * modify any of Shell's Helpers then you should simply not use them. Read more
 * about these principles and how they apply to CSS here:
 *
 * - http://csswizardry.com/2012/04/
 *   the-single-responsibility-principle-applied-to-css/
 * - http://csswizardry.com/2012/06/the-open-closed-principle-applied-to-css/
 *
 * Implementation
 *
 * Helpers are available as classes and sometimes as mixins, here we explain
 * how to implement the two different types. The class versions come with the
 * `!important` keyword, this is because they always need to win in terms of
 * CSS specificity as they should always just work. For the mixin versions
 * this is optional as the mixin versions are typically being applied from
 * within Components therefore do not require the specificity boost. All the
 * mixin versions are defined in "Mixins and Functions -> Helpers".
 *
 * Applying Helpers via their *class* implementation would only be done in two
 * scenarios:
 *
 * - **Outside of Components and Layout Templates:** this'll be rare as most
 *   of your UI should be componentised or encapsulated in a Layout Template,
 *   for example, a site header or footer. An example though, might be that
 *   you have a paragraph element (`<p>`) sitting between two Components in a
 *   view that needs to be center aligned, so you apply one of the "Text"
 *   Helper classes: `.h-text-align-center`, like so:
 *   `<p class="h-text-align-center">`. However, this could be argued that
 *   this paragraph element should become a Component. The main exception of
 *   avoiding Helpers outside of Components and Layout Templates is the
 *   "Spacing" Helpers as we don't want to bake in outside (`margin`) spacing
 *   to Components as this makes them contextual to surrounding UI.
 *
 * - **Inside of Components and Layout Templates:** although quite rare there
 *   are certain scenarios were you would want to be applying a Helper
 *   directly in the markup of a Component or Layout Template as opposed to
 *   applying it via the mixin implementation. However, this typically only
 *   ever applies to multi-line declaration Helpers, applying a single-line
 *   declaration Helper, for example:
 *
    .h-text-size {
        font-size: rem($shell-g-font-size) !important;
    }
 *
 *   Wouldn't be correct as you would simply write that single-line declaration
 *   directly into your Component or Layout Template CSS, and this is why
 *   single-line declaration Helpers do not come with a mixin version. An
 *   example of applying a multi-line declaration Helper directly in the
 *   markup of a Component or Layout Template would be when you're having to
 *   create a class to apply a fairly common Helper. For example, you're
 *   inside a "Drop Down Menu" Component needing to add a piece of text to the
 *   drop down menu trigger button that is only for screen reader users—using
 *   the "Hide visually" Helper. The correct way to achieve this would be:
 *
    <button type="button" class="c-drop-down-menu__trigger">
        My account
        <span class="h-hide-visually">Open the menu with the enter key and
        close it with the escape key; use the up and down arrow keys to
        navigate.</span>
    </button>
 *
 *   Not:
 *
    <button type="button" class="c-drop-down-menu__trigger">
        My account
        <span class="c-drop-down-menu__trigger-assistive-text">Open the menu
        with the enter key and close it with the escape key; use the up and
        down arrow keys to navigate.</span>
    </button>
    .c-drop-down-menu__trigger-assistive-text {
        @include h-hide-visually;
    }
 *
 *   Knowing when to do this isn't always clear and it is very case dependant.
 *
 * Applying Helpers via their *mixin* implementation would only be done in one
 * scenario:
 *
 * - **Inside of Components and Layout Templates:** any multi-line declaration
 *   Helpers should be applied via their mixin, this is to keep all the styles
 *   related to a Component or Layout Template nicely contained. For example,
 *   you may need to truncate a line of text in a site header Layout Template
 *   that is part of a main nav link item—using the "Text truncate" Helper.
 *   The correct way to achieve this would be:
 *
    <a href="some/url" class="l-header__nav-item">List &amp; Subscribers</a>
 *
    .l-header__nav-item {
        […]
        @include h-text-truncate;
    }
 *
 *   Not:
 *
    <a href="some/url" class="l-header__nav-item  h-text-truncate">List &amp;
    Subscribers</a>
 *
 * ----------------------------------------------------------------------------
 *
 * N.B. it is important not to overuse certain Helpers, the exceptions are the
 * "Spacing" Helpers and the "Hide visually" and "Text truncate" Helpers.
 * Overuse can indicate that your UI is not componentised enough, which can
 * lead to a number of problems.
 *
 * ----------------------------------------------------------------------------
 *
 * N.B. some Helpers are available to be applied at any breakpoint the Shell
 * consumer wishes, see "Mixins and Functions -> Apply at breakpoints" to
 * understand how this works.
 *
 * ----------------------------------------------------------------------------
 *
 * Helpers are namespaced with "h" followed by one hyphen, like this:
 *
   h-clear-fix
   h-text-truncate
 *
 * The "h" stands for "helper".
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Clear fix
 * 2. Text
 * 3. Hide
 * 4. Spacing
 * 5. Alignment
 * 6. Intrinsic ratio
 * 7. Non-responsive image
 */
/* 1. Clear fix
   ========================================================================= */
/**
 * Makes an element expand to contain floated children.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */
.h-clear-fix::after {
  clear: both !important;
  content: " !important";
  display: table !important; }

/* 2. Text
   ========================================================================= */
/**
 * Sizes.
 */
/**
 * Base.
 */
.h-text-size {
  font-size: 1rem !important; }

/**
 * Decrease from base.
 */
.h-text-size-small {
  font-size: 0.875rem !important; }

.h-text-size-x-small {
  font-size: 0.8125rem !important; }

.h-text-size-2x-small {
  font-size: 0.75rem !important; }

/**
 * Increase from base.
 */
.h-text-size-large {
  font-size: 1.125rem !important; }

.h-text-size-x-large {
  font-size: 1.5rem !important; }

.h-text-size-2x-large {
  font-size: 1.75rem !important; }

.h-text-size-3x-large {
  font-size: 2rem !important; }

.h-text-size-4x-large {
  font-size: 2.5rem !important; }

.h-text-size-5x-large {
  font-size: 3rem !important; }

.h-text-size-6x-large {
  font-size: 3.5rem !important; }

.h-text-size-7x-large {
  font-size: 4.5rem !important; }

/**
 * Alignments.
 */
.h-text-align-center {
  text-align: center !important; }

.h-text-align-left {
  text-align: left !important; }

.h-text-align-right {
  text-align: right !important; }

/**
 * Truncate some text using an ellipsis. This Helper will only work on block
 * container elements so the default is set to `display: block;`, to override
 * this to be, say, `display: inline-block;` you have two options:
 *
 * 1. Use the "Inline" modifier class selector: `.h-text-truncate--inline`.
 * 2. Use the mixin assigning "inline-block" to the `$display` parameter:
 *    `@include h-text-truncate(inline-block);`.
 *
 * You can assign other `display` values when using the mixin but not sure if
 * that'll ever be required outside of `display: block;` and
 * `display: inline-block;`?
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */
.h-text-truncate {
  display: block !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  white-space: nowrap !important; }

/**
 * Modifier: inline.
 */
.h-text-truncate--inline {
  display: inline-block !important; }

/**
 * Forces words to wrap onto new lines when the word can't fit on a line which
 * is common when text is wrapped in a narrow width container. Hyphenation will
 * be applied to the wrapped word.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */
.h-text-wrap-word-and-hyphenate {
  -webkit-hyphens: auto !important;
      -ms-hyphens: auto !important;
          hyphens: auto !important;
  overflow-wrap: break-word !important;
  word-wrap: break-word !important; }

/* 3. Hide
   ========================================================================= */
/**
 * Hide elements from both screen readers and the document flow.
 */
.h-hide {
  display: none !important; }

/**
 * Hide elements only visually but have it available for screen readers.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */
.h-hide-visually {
  /* stylelint-disable function-whitespace-after */
  clip: rect(1px, 1px, 1px, 1px) !important;
  -webkit-clip-path: polygon(0 0, 0 0, 0 0, 0 0) !important;
          clip-path: polygon(0 0, 0 0, 0 0, 0 0) !important;
  /* stylelint-enable */
  height: 1px !important;
  overflow: hidden !important;
  position: absolute !important;
  white-space: nowrap !important;
  width: 1px !important; }

/**
 * Hide elements for JavaScript users and non-JavaScript users, this is
 * necessary when building accessible and progressively enhanced UI's.
 *
 * These classes are applied to the `<html>` element depending whether
 * JavaScript is on or off:
 *
 * - `no-js` = JavaScript is off
 * - `js`    = JavaScript is on
 *
 * The `no-js` class is to be hard-coded to the `<html>` element in your master
 * layout to be replaced with the `js` class using JavaScript.
 *
 * N.B. these single-line declaration Helpers would typically always be applied
 * directly in the markup of your Components and Layout Templates.
 */
.no-js .h-hide-if-js-off {
  display: none !important; }

.js .h-hide-if-js-on {
  display: none !important; }

/**
 * Hide and show elements for print media.
 */
.h-show-for-print,
.h-show-for-print-inline,
.h-show-for-print-inline-block {
  display: none !important; }

@media print {
  .h-hide-for-print {
    display: none !important; }
  .h-show-for-print {
    display: block !important; }
  .h-show-for-print-inline {
    display: inline !important; }
  .h-show-for-print-inline-block {
    display: inline-block !important; } }

/* 4. Spacing
   ========================================================================= */
/**
 * Sometimes spacing outside of a Component is handled by one of these
 * "Spacing" Helpers, and ALL spacing is downward facing hence only
 * `margin-bottom` being used.
 */
/**
 * Base.
 */
.h-spacing {
  margin-bottom: 1rem !important; }

/**
 * Decrease from base.
 */
.h-spacing-small {
  margin-bottom: 0.75rem !important; }

.h-spacing-x-small {
  margin-bottom: 0.5rem !important; }

.h-spacing-2x-small {
  margin-bottom: 0.25rem !important; }

/**
 * Increase from base.
 */
.h-spacing-large {
  margin-bottom: 1.5rem !important; }

.h-spacing-x-large {
  margin-bottom: 2rem !important; }

.h-spacing-2x-large {
  margin-bottom: 2.5rem !important; }

.h-spacing-3x-large {
  margin-bottom: 3rem !important; }

.h-spacing-4x-large {
  margin-bottom: 3.5rem !important; }

.h-spacing-5x-large {
  margin-bottom: 4.5rem !important; }

.h-spacing-6x-large {
  margin-bottom: 6rem !important; }

/**
 * Remove spacing.
 */
.h-spacing-none {
  margin-bottom: 0 !important; }

/* 5. Alignment
   ========================================================================= */
/**
 * Flexbox version, must go on the parent of the element that needs the
 * alignment.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */
.h-align-horizontally-and-vertically {
  -webkit-box-align: center !important;
      -ms-flex-align: center !important;
          align-items: center !important;
  display: -webkit-box !important;
  display: -ms-flexbox !important;
  display: flex !important;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-flow: column;
          flex-flow: column;
  -webkit-box-pack: center !important;
      -ms-flex-pack: center !important;
          justify-content: center !important; }

/**
 * Position and transform version, must go on the element that needs the
 * alignment and the elements parent must have `position: relative;`.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */
.h-align-horizontally-and-vertically-parent {
  position: relative !important; }

.h-align-horizontally-and-vertically-alt {
  left: 50% !important;
  position: absolute !important;
  top: 50% !important;
  /* stylelint-disable-next-line function-whitespace-after */
  -webkit-transform: translate(-50%, -50%) !important;
          transform: translate(-50%, -50%) !important; }

/* 6. Intrinsic ratio
   ========================================================================= */
/**
 * A container that retains the aspect ratio of its content when that content
 * needs to adapt to the width of varying viewports. The content would
 * typically be embedded elements, like:
 *
 * `<video>`
 * `<iframe>`
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 *
 * @credit
 * https://github.com/suitcss/components-flex-embed/blob/master/lib/
 * flex-embed.css
 */
/**
 * The container, the default ratio is "16:9".
 */
.h-intrinsic-ratio {
  display: block !important;
  height: 0 !important;
  overflow: hidden !important;
  /* stylelint-disable-next-line function-whitespace-after, max-line-length */
  padding-bottom: 56.25% !important;
  position: relative !important; }

/**
 * Modifiers: different ratios, we can't use the mixin for this as it'll
 * generate too much CSS as we'll be generating every property for each
 * modifier when we only need to set the `padding-bottom` property—so we just
 * override the default ratio of "16:9".
 */
.h-intrinsic-ratio--3-by-1 {
  padding-bottom: 33.33333% !important; }

.h-intrinsic-ratio--2-by-1 {
  padding-bottom: 50% !important; }

.h-intrinsic-ratio--4-by-3 {
  padding-bottom: 75% !important; }

.h-intrinsic-ratio--1-by-1 {
  padding-bottom: 100% !important; }

/**
 * The content.
 */
.h-intrinsic-ratio__content {
  height: 100% !important;
  left: 0 !important;
  position: absolute !important;
  top: 0 !important;
  width: 100% !important; }

/* 7. Non-responsive image
   ========================================================================= */
/**
 * Images are responsive by default, see: "Base -> Images". But there can be
 * scenarios when you don't need this. A common example is when using
 * third-party widgets like Google Maps, not applying a Helper like this can
 * result in images not rendering correctly.
 *
 * This selector: `.h-non-responsive-img img` is included as sometimes applying
 * the Helper directly to the image element isn't always possible, or,
 * sometimes it makes sense to target a bunch of image elements within a
 * certain element.
 */
.h-non-responsive-img,
.h-non-responsive-img img {
  max-width: none !important; }

.tm-button {
  border: 1px solid #d2d0d2;
  border-radius: 0;
  color: #4a4a4a;
  font-size: 0.8125rem;
  font-weight: 300;
  padding: 0.5rem 0.75rem; }
  .tm-button:hover {
    background-color: #f5f5f5; }
  .tm-button:focus {
    border: 1px solid #4a90e2;
    outline: 0; }
  .tm-button:active {
    background-color: #eeeeee; }
  .tm-button:disabled {
    cursor: default;
    pointer-events: none;
    opacity: 0.6; }

.tm-button--small {
  background-color: #fff;
  padding: 0.25rem; }

.tm-button-icon {
  background-color: transparent; }

.tm-header {
  border-bottom: 1px solid #d2d0d2;
  padding: 0.5rem 1rem; }

.tm-header__title {
  color: #4a4a4a;
  font-size: 0.75rem;
  font-weight: 700;
  text-transform: uppercase; }

.tm-note {
  height: 100%;
  width: 100%; }

.tm-note-form {
  border-right: 1px solid #d2d0d2;
  float: left;
  height: 100%;
  padding: 1rem;
  width: 15.625rem; }

.tm-note-content {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap; }

.tm-note-input {
  border: 1px solid #d2d0d2;
  font-weight: 300;
  font-size: 0.8125rem;
  padding: 0.5rem;
  width: 100%; }
  .tm-note-input.is-error {
    border-color: #F44336; }

.tm-note-form__btn-group {
  float: right; }

.tm-note-card {
  -webkit-box-shadow: 2px 2px 0 0 #d2d0d2;
          box-shadow: 2px 2px 0 0 #d2d0d2;
  background-color: #f5f5f5;
  height: -webkit-fit-content;
  height: -moz-fit-content;
  height: fit-content;
  padding: 1rem;
  margin: 1rem;
  margin-bottom: 0;
  margin-right: 0;
  width: 13.75rem; }

.tm-note-card__title {
  color: #4a4a4a;
  font-size: 0.75rem;
  font-weight: 700;
  text-transform: uppercase; }

.tm-note-card__content {
  color: #4a4a4a;
  font-size: 0.75rem; }

.tm-note-card__control {
  border-top: 1px solid #d2d0d2;
  padding-top: 0.5rem; }

/* This file contains purely Dirty hacks to be cleaned up - moved to other
 * files. See: http://csswizardry.com/2013/04/shame-css/
 */
body,
html {
  height: 100%;
  font-size: 16px;
  width: 100%; }

body {
  margin: 0;
  padding: 0;
  font-family: Helvetica, sans-serif; }

#root,
.tm-app {
  height: 100%;
  width: 100%; }

.modal-container {
  position: relative; }

.modal-container .modal, .modal-container .modal-backdrop {
  position: absolute; }

.tm-button {
  margin-left: 0.5rem; }

/*# sourceMappingURL=style.css.map */